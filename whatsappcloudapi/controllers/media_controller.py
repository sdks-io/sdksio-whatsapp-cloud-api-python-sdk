# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from whatsappcloudapi.api_helper import APIHelper
from whatsappcloudapi.configuration import Server
from whatsappcloudapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from whatsappcloudapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from whatsappcloudapi.models.upload_media import UploadMedia
from whatsappcloudapi.models.retrieve_media_url_response import RetrieveMediaURLResponse
from whatsappcloudapi.models.success_response import SuccessResponse


class MediaController(BaseController):

    """A Controller to access Endpoints in the whatsappcloudapi API."""
    def __init__(self, config):
        super(MediaController, self).__init__(config)

    def upload_media(self,
                     phone_number_id,
                     messaging_product,
                     file,
                     mtype):
        """Does a POST request to /{Phone-Number-ID}/media.

        Used to upload media. All media files sent through this endpoint are
        encrypted and persist for 30 days.

        Args:
            phone_number_id (string): TODO: type description here.
            messaging_product (string): Messaging service used for the
                request. In this case, use whatsapp.
            file (string): Path to the file stored in your local directory.
                For example: "@/local/path/file.jpg".
            mtype (string): Type of media file being uploaded. See Supported
                Media Types for more information.    Supported options for
                images are: `image/jpeg`, `image/png`    Supported options for
                documents are: `text/plain`, `application/pdf`,
                `application/vnd.ms-powerpoint`, `application/msword`,
                `application/vnd.ms-excel`,
                `application/vnd.openxmlformats-officedocument.wordprocessingml
                .document`,
                `application/vnd.openxmlformats-officedocument.presentationml.p
                resentation`,
                `application/vnd.openxmlformats-officedocument.spreadsheetml.sh
                eet`  Supported options for audio are: `audio/aac`,
                `audio/mp4`, `audio/mpeg`, `audio/amr`, `audio/ogg`,
                `audio/opus`  Supported options for video are: `video/mp4`,
                `video/3gp`  Supported options for stickers are: `image/webp`

        Returns:
            UploadMedia: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/{Phone-Number-ID}/media')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('Phone-Number-ID')
                            .value(phone_number_id)
                            .should_encode(True))
            .form_param(Parameter()
                        .key('messaging_product')
                        .value(messaging_product))
            .form_param(Parameter()
                        .key('file')
                        .value(file))
            .form_param(Parameter()
                        .key('type')
                        .value(mtype))
            .header_param(Parameter()
                          .key('content-type')
                          .value('application/x-www-form-urlencoded'))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UploadMedia.from_dictionary)
        ).execute()

    def retrieve_media_url(self,
                           media_id):
        """Does a GET request to /{Media-ID}.

        To retrieve your mediaâ€™s URL, make a request to this endpoint. Later,
        you can use this URL to download the media file.

        Args:
            media_id (string): Media object ID from either uploading media
                endpoint or media message Webhooks

        Returns:
            RetrieveMediaURLResponse: Response from the API. OK. A successful
                response includes an object with a media URL. The URL is only
                valid for 5 minutes.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/{Media-ID}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('Media-ID')
                            .value(media_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RetrieveMediaURLResponse.from_dictionary)
        ).execute()

    def delete_media(self,
                     media_id):
        """Does a DELETE request to /{Media-ID}.

        This endpoint can be used for deleting a media object.

        Args:
            media_id (string): Media object ID from either uploading media
                endpoint or media message Webhooks

        Returns:
            SuccessResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/{Media-ID}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('Media-ID')
                            .value(media_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessResponse.from_dictionary)
        ).execute()
