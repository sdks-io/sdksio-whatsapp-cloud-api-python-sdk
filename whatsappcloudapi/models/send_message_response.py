# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.models.response_contact import ResponseContact
from whatsappcloudapi.models.response_message import ResponseMessage


class SendMessageResponse(object):

    """Implementation of the 'SendMessageResponse' model.

    TODO: type model description here.

    Attributes:
        messaging_product (string): TODO: type description here.
        contacts (list of ResponseContact): TODO: type description here.
        messages (list of ResponseMessage): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "messaging_product": 'messaging_product',
        "contacts": 'contacts',
        "messages": 'messages'
    }

    def __init__(self,
                 messaging_product=None,
                 contacts=None,
                 messages=None):
        """Constructor for the SendMessageResponse class"""

        # Initialize members of the class
        self.messaging_product = messaging_product 
        self.contacts = contacts 
        self.messages = messages 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        messaging_product = dictionary.get("messaging_product") if dictionary.get("messaging_product") else None
        contacts = None
        if dictionary.get('contacts') is not None:
            contacts = [ResponseContact.from_dictionary(x) for x in dictionary.get('contacts')]
        messages = None
        if dictionary.get('messages') is not None:
            messages = [ResponseMessage.from_dictionary(x) for x in dictionary.get('messages')]
        # Return an object of this model
        return cls(messaging_product,
                   contacts,
                   messages)
