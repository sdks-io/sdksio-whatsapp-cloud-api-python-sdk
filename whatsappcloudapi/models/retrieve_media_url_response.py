# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class RetrieveMediaURLResponse(object):

    """Implementation of the 'RetrieveMediaURLResponse' model.

    TODO: type model description here.

    Attributes:
        messaging_product (string): TODO: type description here.
        url (string): TODO: type description here.
        mime_type (string): TODO: type description here.
        sha_256 (string): TODO: type description here.
        file_size (string): TODO: type description here.
        id (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "messaging_product": 'messaging_product',
        "url": 'url',
        "mime_type": 'mime_type',
        "sha_256": 'sha256',
        "file_size": 'file_size',
        "id": 'id'
    }

    def __init__(self,
                 messaging_product=None,
                 url=None,
                 mime_type=None,
                 sha_256=None,
                 file_size=None,
                 id=None):
        """Constructor for the RetrieveMediaURLResponse class"""

        # Initialize members of the class
        self.messaging_product = messaging_product 
        self.url = url 
        self.mime_type = mime_type 
        self.sha_256 = sha_256 
        self.file_size = file_size 
        self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        messaging_product = dictionary.get("messaging_product") if dictionary.get("messaging_product") else None
        url = dictionary.get("url") if dictionary.get("url") else None
        mime_type = dictionary.get("mime_type") if dictionary.get("mime_type") else None
        sha_256 = dictionary.get("sha256") if dictionary.get("sha256") else None
        file_size = dictionary.get("file_size") if dictionary.get("file_size") else None
        id = dictionary.get("id") if dictionary.get("id") else None
        # Return an object of this model
        return cls(messaging_product,
                   url,
                   mime_type,
                   sha_256,
                   file_size,
                   id)
