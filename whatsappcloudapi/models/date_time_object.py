# -*- coding: utf-8 -*-

"""
whatsappcloudapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from whatsappcloudapi.api_helper import APIHelper


class DateTimeObject(object):

    """Implementation of the 'DateTimeObject' model.

    TODO: type model description here.

    Attributes:
        fallback_value (string): Default text. For Cloud API, we always use
            the fallback value, and we do not attempt to localize using other
            optional fields.
        day_of_week (int): TODO: type description here.
        year (int): TODO: type description here.
        month (int): TODO: type description here.
        day_of_month (int): TODO: type description here.
        hour (int): TODO: type description here.
        minute (int): TODO: type description here.
        calendar (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "fallback_value": 'fallback_value',
        "day_of_week": 'day_of_week',
        "year": 'year',
        "month": 'month',
        "day_of_month": 'day_of_month',
        "hour": 'hour',
        "minute": 'minute',
        "calendar": 'calendar'
    }

    _optionals = [
        'day_of_week',
        'year',
        'month',
        'day_of_month',
        'hour',
        'minute',
        'calendar',
    ]

    def __init__(self,
                 fallback_value=None,
                 day_of_week=APIHelper.SKIP,
                 year=APIHelper.SKIP,
                 month=APIHelper.SKIP,
                 day_of_month=APIHelper.SKIP,
                 hour=APIHelper.SKIP,
                 minute=APIHelper.SKIP,
                 calendar=APIHelper.SKIP):
        """Constructor for the DateTimeObject class"""

        # Initialize members of the class
        self.fallback_value = fallback_value 
        if day_of_week is not APIHelper.SKIP:
            self.day_of_week = day_of_week 
        if year is not APIHelper.SKIP:
            self.year = year 
        if month is not APIHelper.SKIP:
            self.month = month 
        if day_of_month is not APIHelper.SKIP:
            self.day_of_month = day_of_month 
        if hour is not APIHelper.SKIP:
            self.hour = hour 
        if minute is not APIHelper.SKIP:
            self.minute = minute 
        if calendar is not APIHelper.SKIP:
            self.calendar = calendar 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        fallback_value = dictionary.get("fallback_value") if dictionary.get("fallback_value") else None
        day_of_week = dictionary.get("day_of_week") if dictionary.get("day_of_week") else APIHelper.SKIP
        year = dictionary.get("year") if dictionary.get("year") else APIHelper.SKIP
        month = dictionary.get("month") if dictionary.get("month") else APIHelper.SKIP
        day_of_month = dictionary.get("day_of_month") if dictionary.get("day_of_month") else APIHelper.SKIP
        hour = dictionary.get("hour") if dictionary.get("hour") else APIHelper.SKIP
        minute = dictionary.get("minute") if dictionary.get("minute") else APIHelper.SKIP
        calendar = dictionary.get("calendar") if dictionary.get("calendar") else APIHelper.SKIP
        # Return an object of this model
        return cls(fallback_value,
                   day_of_week,
                   year,
                   month,
                   day_of_month,
                   hour,
                   minute,
                   calendar)
